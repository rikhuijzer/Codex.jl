var documenterSearchIndex = {"docs":
[{"location":"transformexport/#TransformExport","page":"TransformExport","title":"TransformExport","text":"","category":"section"},{"location":"transformexport/","page":"TransformExport","title":"TransformExport","text":"Module to transform the data exported from the backend.","category":"page"},{"location":"transformexport/#Public","page":"TransformExport","title":"Public","text":"","category":"section"},{"location":"transformexport/","page":"TransformExport","title":"TransformExport","text":"Modules = [Codex.TransformExport]\nPrivate = false","category":"page"},{"location":"transformexport/#Codex.TransformExport.process-Tuple{Any, Any}","page":"TransformExport","title":"Codex.TransformExport.process","text":"process(in_dir, out_dir; fns)\n\nProcesses the responses from the export folder, applies the functions fns and places the files at out_dir.\n\n\n\n\n\n","category":"method"},{"location":"transformexport/#Codex.TransformExport.read_csv-Tuple{Any}","page":"TransformExport","title":"Codex.TransformExport.read_csv","text":"read_csv(path; delim)::DataFrame\n\nCopies CSV at path into memory.\n\n\n\n\n\n","category":"method"},{"location":"transformexport/#Codex.TransformExport.responses-Tuple{String}","page":"TransformExport","title":"Codex.TransformExport.responses","text":"responses(dir::String)::Dict{String,DataFrame}\n\nReturn responses for an export folder such as \"2020-08\".\n\n\n\n\n\n","category":"method"},{"location":"transformexport/#Codex.TransformExport.rm_descriptions-Tuple{Any}","page":"TransformExport","title":"Codex.TransformExport.rm_descriptions","text":"rm_descriptions(df)::DataFrame\n\nFind responses containing a description, for example 6 (heel erg), and remove the description.\n\n\n\n\n\n","category":"method"},{"location":"transformexport/#Codex.TransformExport.simplify-Tuple{DataFrame}","page":"TransformExport","title":"Codex.TransformExport.simplify","text":"simplify(df)::DataFrame\n\nRenames id column after removing extraneous rows and columns, that is, removes empty rows and  removes columns such as protocol_subscription_id, open_from and v2_1_timing.\n\n\n\n\n\n","category":"method"},{"location":"transformexport/#Codex.TransformExport.split_datetime-Union{Tuple{T}, Tuple{DataFrame, T}} where T<:Union{AbstractString, Signed, Symbol, Unsigned}","page":"TransformExport","title":"Codex.TransformExport.split_datetime","text":"split_datetime(df::DataFrame, datetime_col::ColumnIndex)::DataFrame\n\nSplit the datetime column datetime_col into two columns, namely one for date and one for time.\n\n\n\n\n\n","category":"method"},{"location":"transformexport/#Codex.TransformExport.substitute_names-Tuple{Any, DataFrame}","page":"TransformExport","title":"Codex.TransformExport.substitute_names","text":"substitute_names(df, with::DataFrame)::DataFrame\nsubstitute_names(with)::Function\n\nReplaces person_ids by the first name as listed in with.\n\n\n\n\n\n","category":"method"},{"location":"transformexport/#Private","page":"TransformExport","title":"Private","text":"","category":"section"},{"location":"transformexport/","page":"TransformExport","title":"TransformExport","text":"Modules = [Codex.TransformExport]\nPublic = false","category":"page"},{"location":"transformexport/#Codex.TransformExport._contains_description-Tuple{Any}","page":"TransformExport","title":"Codex.TransformExport._contains_description","text":"_contains_description(col)::Bool\n\nReturn whether the column col contains descriptions.\n\n\n\n\n\n","category":"method"},{"location":"transformexport/#Codex.TransformExport._description_regex-Tuple{}","page":"TransformExport","title":"Codex.TransformExport._description_regex","text":"_description_regex()\n\nReturn regex for matching a description such as 1 (lorem) or 2 <br /> (ipsum).\n\n\n\n\n\n","category":"method"},{"location":"transformexport/#Codex.TransformExport._rm_description-Tuple{Any}","page":"TransformExport","title":"Codex.TransformExport._rm_description","text":"_rm_description(e::String)::String\n\nApply regex replace on element e.\n\n\n\n\n\n","category":"method"},{"location":"transformexport/#Codex.TransformExport._rm_descriptions-Tuple{Any}","page":"TransformExport","title":"Codex.TransformExport._rm_descriptions","text":"_rm_descriptions(col)::Array{Int,1}\n\nApply a regex replace and type conversion to all elements of the column col. \n\n\n\n\n\n","category":"method"},{"location":"transformexport/#Codex.TransformExport.parsedatetime-Tuple{Any}","page":"TransformExport","title":"Codex.TransformExport.parsedatetime","text":"parsedatetime(str)::DateTime\n\nParse a date and time string from the export to a Julia DateTime object.\n\n\n\n\n\n","category":"method"},{"location":"backup/#Backup","page":"Backup","title":"Backup","text":"","category":"section"},{"location":"backup/","page":"Backup","title":"Backup","text":"Module for automating backups.","category":"page"},{"location":"backup/#Public","page":"Backup","title":"Public","text":"","category":"section"},{"location":"backup/","page":"Backup","title":"Backup","text":"Modules = [Codex.Backup]\nPrivate = false","category":"page"},{"location":"backup/#Private","page":"Backup","title":"Private","text":"","category":"section"},{"location":"backup/","page":"Backup","title":"Backup","text":"Modules = [Codex.Backup]\nPublic = false","category":"page"},{"location":"gitlab/#GitLab","page":"GitLab","title":"GitLab","text":"","category":"section"},{"location":"gitlab/","page":"GitLab","title":"GitLab","text":"Julia interface to some endpoints of the GitLab API v4.","category":"page"},{"location":"gitlab/#Public","page":"GitLab","title":"Public","text":"","category":"section"},{"location":"gitlab/","page":"GitLab","title":"GitLab","text":"Modules = [Codex.GitLab]\nPrivate = false","category":"page"},{"location":"gitlab/#Private","page":"GitLab","title":"Private","text":"","category":"section"},{"location":"gitlab/","page":"GitLab","title":"GitLab","text":"Modules = [Codex.GitLab]\nPublic = false","category":"page"},{"location":"questionnaires/#Questionnaires","page":"Questionnaires","title":"Questionnaires","text":"","category":"section"},{"location":"questionnaires/","page":"Questionnaires","title":"Questionnaires","text":"Module for analysing the questionnaires.","category":"page"},{"location":"questionnaires/#Public","page":"Questionnaires","title":"Public","text":"","category":"section"},{"location":"questionnaires/","page":"Questionnaires","title":"Questionnaires","text":"Modules = [Codex.Questionnaires]\nPrivate = false","category":"page"},{"location":"questionnaires/#Private","page":"Questionnaires","title":"Private","text":"","category":"section"},{"location":"questionnaires/","page":"Questionnaires","title":"Questionnaires","text":"Modules = [Codex.Questionnaires]\nPublic = false","category":"page"},{"location":"questionnaires/#Codex.Questionnaires.add_basic_motives!-Tuple{DataFrame}","page":"Questionnaires","title":"Codex.Questionnaires.add_basic_motives!","text":"add_basic_motives!(df::DataFrame)\n\nAdd basale drijfveren columns and remove the items. All items are 1 (helemaal niet) to (in extreem sterke mate).\n\n1-4 autonomie;\n5-8 verbondenheid;\n9-12 competentie;\n13-16 structuur;\n17-20 macht;\n21-24 maatschappelijke verantwoordelijkheid;\n25-28 status\n\n\n\n\n\n","category":"method"},{"location":"questionnaires/#Codex.Questionnaires.add_fear_of_failure!-Tuple{DataFrame}","page":"Questionnaires","title":"Codex.Questionnaires.add_fear_of_failure!","text":"add_fear_of_failure(df::DataFrame)\n\nAdd fear of failure (faalangst) columns and remove the items.\n\n\n\n\n\n","category":"method"},{"location":"questionnaires/#Codex.Questionnaires.add_mindsets!-Tuple{DataFrame}","page":"Questionnaires","title":"Codex.Questionnaires.add_mindsets!","text":"add_mindsets!(df::DataFrame)\n\nAdd motivation columns and remove the items. All items are 1 (helemaal mee oneens) to 6 (helemaal mee eens) and v4 and v6 are reversed. Verified on 2019-first and 2020-first.\n\n\n\n\n\n","category":"method"},{"location":"questionnaires/#Codex.Questionnaires.add_motivation_type!-Tuple{DataFrame}","page":"Questionnaires","title":"Codex.Questionnaires.add_motivation_type!","text":"add_motivation_type!(df::DataFrame)::DataFrame\n\nAdd type motivatie columns and remove the items.\n\nScoring is based on Ruud his Word document:\n\nAmotivation (3,11,16);\nExternal regulation (4,8,13);\nIntrojected regulation (7,12,18);\nIdentified regulation (5,9,15);\nIntegrated regulation (1,6,17);\nIntrinsic motivation (2,10,14)\n\nThe items start at 48 for all versions.\n\nAlso, 2019 to 2020 go from 1 to 7 so let's say all.\n\n\n\n\n\n","category":"method"},{"location":"questionnaires/#Codex.Questionnaires.add_temperaments!-Tuple{Any}","page":"Questionnaires","title":"Codex.Questionnaires.add_temperaments!","text":"add_temperaments!(df)\n\nAdd approach and avoidance temperament columns and remove the items.\n\nScoring is based on Ruud his Word document:\n\nApproach temperament = item2+item4+item5+item8+item10+item11\nAvoidance temperament = item1+item3+item6+item7+item9+item12\n\nAnd according to 2019-first/questionnaires/hotel.csv the items start at 62. Also for 2020 first.\n\n\n\n\n\n","category":"method"},{"location":"questionnaires/#Codex.Questionnaires.all_ids-Tuple{Any}","page":"Questionnaires","title":"Codex.Questionnaires.all_ids","text":"all_ids(responses_dir)::Vector{String}\n\n\n\n\n\n","category":"method"},{"location":"questionnaires/#Codex.Questionnaires.charlie2int-Tuple{Int64, AbstractString}","page":"Questionnaires","title":"Codex.Questionnaires.charlie2int","text":"charlie2int(q::Int, s::AbstractString)\n\nConvert s to Int for question number q.\n\n\n\n\n\n","category":"method"},{"location":"questionnaires/#Codex.Questionnaires.dropouts-Tuple{String}","page":"Questionnaires","title":"Codex.Questionnaires.dropouts","text":"dropouts(raw_dir::String)\n\nReturns dropout data where all IDs are in the long identifier format. On 2021-07-19, returned a 197x7 dataset.\n\n\n\n\n\n","category":"method"},{"location":"questionnaires/#Codex.Questionnaires.fix_age-Tuple{AbstractString}","page":"Questionnaires","title":"Codex.Questionnaires.fix_age","text":"fix_age(x::AbstractString)::Int\n\nReturn age after parsing x.\n\njulia> fix_age = Codex.Questionnaires.fix_age;\n\njulia> fix_age(\"27-jun-93\")\n26\n\njulia> fix_age(\"1993\")\n26\n\njulia> fix_age(\"23 jaar\")\n23\n\n\n\n\n\n","category":"method"},{"location":"questionnaires/#Codex.Questionnaires.get_hnd-Tuple{AbstractString}","page":"Questionnaires","title":"Codex.Questionnaires.get_hnd","text":"get_hnd(path::AbstractString)::DataFrame\n\nGet HowNutsAreTheDutch data and select big five, age and more.\n\n\n\n\n\n","category":"method"},{"location":"questionnaires/#Codex.Questionnaires.join_questionnaires-Tuple{String, Vector{String}, Vector{String}}","page":"Questionnaires","title":"Codex.Questionnaires.join_questionnaires","text":"join_questionnaires(raw_dir::String, questionnaires::Array{String,1}, groups::Array{String,1})::DataFrame\n\nJoines multiple questionnaires for the members of groups, where groups ensures that the joins do not remove rows which shouldn't be removed. For instance, given questionnaires \"A\" and \"B\" containing respectively columns :a1, :a2 and :b1, this method will return { group, id, A_a1, A_a2, B_b1 }.\n\n\n\n\n\n","category":"method"},{"location":"questionnaires/#Codex.Questionnaires.join_vo_questionnaires-Tuple{String}","page":"Questionnaires","title":"Codex.Questionnaires.join_vo_questionnaires","text":"join_vo_questionnaires(raw_dir::String)::DataFrame\n\nCombine information from multiple questionnaires to allow model fitting.\n\n\n\n\n\n","category":"method"},{"location":"questionnaires/#Codex.Questionnaires.replace_usernames-Tuple{DataFrame, Symbol, DataFrame}","page":"Questionnaires","title":"Codex.Questionnaires.replace_usernames","text":"replace_usernames(df::DataFrame, id_col::Symbol, id_username::DataFrame)\n\nFor every username in df[!, id_col], replace the name by the long identifier. The long identifier is necessary, because usernames where not anonymized in 2018.\n\n\n\n\n\n","category":"method"},{"location":"questionnaires/#Codex.Questionnaires.resilience2scores-Tuple{DataFrame}","page":"Questionnaires","title":"Codex.Questionnaires.resilience2scores","text":"resilience2scores(df::DataFrame)\n\nReturn the score for questionnaire charlie.\n\n\n\n\n\n","category":"method"},{"location":"questionnaires/#Codex.Questionnaires.responses-Tuple{String, String, String}","page":"Questionnaires","title":"Codex.Questionnaires.responses","text":"responses(data_dir::String, nato_name::String, group::String; measurement=999)::DataFrame\n\nResponses for group group and measurement measurement, where group is one of graduates, operators, dropouts-medical or dropouts-non-medical. measurement is only used to split the 2018 data, for the later datasets it is ignored.\n\nExample in 2021-07:\n\njulia> dir = joinpath(ysf_raw, \"2020-first\");\n\njulia> df = Codex.Questionnaires.responses(dir, \"kilo\", \"dropouts\");\n\njulia> nrow(df)\n25\n\njulia> select(first(df, 5), Not([:id, :completed_at]))\n5×3 DataFrame\n Row │ group     optimism  pessimism\n     │ String    Int64     Int64\n─────┼───────────────────────────────\n   1 │ dropouts        10         10\n   2 │ dropouts        13          6\n   3 │ dropouts        10          9\n   4 │ dropouts        12          6\n   5 │ dropouts        12          5\n\n\n\n\n\n","category":"method"},{"location":"questionnaires/#Codex.Questionnaires.responses-Tuple{String, String}","page":"Questionnaires","title":"Codex.Questionnaires.responses","text":"Responses for questionnaire nato_name as contained in directory data_dir. Returns a DataFrame with rows { id, r...} where id is a long identifier and not the one from the backend.\n\n\n\n\n\n","category":"method"},{"location":"questionnaires/#Codex.Questionnaires.self_efficacy2scores-Tuple{DataFrame}","page":"Questionnaires","title":"Codex.Questionnaires.self_efficacy2scores","text":"self_efficacy2scores(echo::DataFrame)::DataFrame\n\nReturn the scores for the echo questionnaire, which is about self-efficacy. None of the items appear to be reversed, so this method just returns the sum.\n\nThis function assumes questions [1, 14] which holds for all questionnaires in from 2018 to the time of writing (2021).\n\n\n\n\n\n","category":"method"},{"location":"questionnaires/#Codex.Questionnaires.unfinished_info-Tuple{Any}","page":"Questionnaires","title":"Codex.Questionnaires.unfinished_info","text":"unfinished_info(responses_dir; required::Union{Nothing,Vector{String}}=missing)::Vector{Unfinished}\n\nReturn the ids for which not all questionnaires in required have been filled in. When ismissing(required), take all the questionnaires in responses_dir.\n\nExample\n\n``` julia> responses_dir = joinpath(homedir(), \"git\", \"ysf-raw\", \"2021-08\", \"responses\");\n\njulia> required = [\"alfa\", \"bravo\", \"charlie\", \"delta\", \"echo\", \"foxtrot\", \"golf\", \"hotel\", \"india\", \"julliet\", \"kilo\", \"lima\", \"mike\"];\n\njulia> Codex.Questionnaires.unfinishedinfo(responsesdir; required)\n\n\n\n\n\n","category":"method"},{"location":"questionnaires/#Codex.Questionnaires.unfinished_questionnaires-Tuple{String, String}","page":"Questionnaires","title":"Codex.Questionnaires.unfinished_questionnaires","text":"unfinished_questionnaires(responses_dir::String, id::String)\n\nReturn questionnaire names in responses_dir for which id is not in filled_out_by_id column. This assumes that unfinished questionnaires have a missing in the filled_out_by_id column.\n\n\n\n\n\n","category":"method"},{"location":"questionnaires/#Codex.Questionnaires.unify_demographics-Tuple{Any}","page":"Questionnaires","title":"Codex.Questionnaires.unify_demographics","text":"unify_demographics(df)\n\nReturns an simplified and unified DataFrame which is the same for 2018, 2019 and 2020. It may throw out some data which we don't need at the time of writing.\n\n\n\n\n\n","category":"method"},{"location":"questionnaires/#Codex.Questionnaires.validate_dropouts-Tuple{DataFrame}","page":"Questionnaires","title":"Codex.Questionnaires.validate_dropouts","text":"validate_dropouts(df::DataFrame)\n\nValidate \"dropouts.csv\".\n\n\n\n\n\n","category":"method"},{"location":"#Codex","page":"Codex","title":"Codex","text":"","category":"section"},{"location":"#Public","page":"Codex","title":"Public","text":"","category":"section"},{"location":"","page":"Codex","title":"Codex","text":"Modules = [Codex]\nPublic = true","category":"page"},{"location":"#Codex.accuracy-Tuple{Any, Any}","page":"Codex","title":"Codex.accuracy","text":"accuracy(trues, preds)::Number\n\nThe number of correct predictions in pred (by comparing true to prediction) divided by the total number of predictions.\n\n\n\n\n\n","category":"method"},{"location":"#Codex.apply-Tuple{Any, Any}","page":"Codex","title":"Codex.apply","text":"apply(fns, obj)\napply(fns) -> Function\napply(fn::Function, nt::NamedTuple) -> NamedTuple\n\nApply function fn or functions fns to object. The functions are applied in order, unlike the behaviour of function composition. Also defines partial function. (For partial declarations in Base, see issue #35052 or endswith(suffix).)\n\n\n\n\n\n","category":"method"},{"location":"#Codex.cohens_d-Tuple{Any, Any, Any}","page":"Codex","title":"Codex.cohens_d","text":"cohens_d(μ1, μ2, s)\ncohens_d(n1, μ1, s1, n2, μ2, s2)\ncohens_d(A::Array, B::Array)\n\nEffect size according to Cohen's d for means μ1 and μ2, number of samples n1 and n2, and standard deviations s1 and s2 for respectively group 1 and 2.\n\n\n\n\n\n","category":"method"},{"location":"#Codex.dirparent-Tuple{Any}","page":"Codex","title":"Codex.dirparent","text":"dirparent(path)::String\ndirparent(path, n)::String\n\nReturns the parent or n-th parent directory for path, where path can be a file or directory.\n\ndirparent(\"/a/b/c\")\n\n\n\n\n\n","category":"method"},{"location":"#Codex.has_duplicates-Tuple{AbstractArray}","page":"Codex","title":"Codex.has_duplicates","text":"has_duplicates(A::AbstractArray)::Bool\n\nReturns whether A contains duplicates.\n\n\n\n\n\n","category":"method"},{"location":"#Codex.map_by_df-Tuple{AbstractArray, DataFrame, Symbol, Symbol}","page":"Codex","title":"Codex.map_by_df","text":"map_by_df(a::Array, df::DataFrame, from::Symbol, to::Symbol; missing=nothing)::Array\n\nReturn array A where all elements are mapped from U to V. Leaving all elements of A for which no match is found unchanged.\n\n!! Note-to-self. This is dumb function. Use joins instead.\n\n\n\n\n\n","category":"method"},{"location":"#Codex.nrow_per_group-Tuple{Any, Symbol}","page":"Codex","title":"Codex.nrow_per_group","text":"nrow_per_group(df::DataFrame, group::Symbol; col1=\"group\", col2=\"nrow\")::DataFrame\n\nReturn the group name and the number of rows per group in df.\n\n\n\n\n\n","category":"method"},{"location":"#Codex.output-Tuple{Function}","page":"Codex","title":"Codex.output","text":"output(f::Function) -> Output\noutput(cmd::Cmd) -> Output\n\nEvaluates f of type f(out::String, err::String)::CmdRedirect or cmd::Cmd.\n\n\n\n\n\n","category":"method"},{"location":"#Codex.rescale-NTuple{5, Any}","page":"Codex","title":"Codex.rescale","text":"rescale(a, a_l, a_u, b_l, b_u)::Number\n\nApply feature scaling to a from the range [a_l, a_u] to the range [b_l, b_u].\n\n\n\n\n\n","category":"method"},{"location":"#Codex.split_data-Tuple{DataFrame, Any, Any, Any}","page":"Codex","title":"Codex.split_data","text":"split_data(df::DataFrame, group_col, data_col, groups)::Tuple\n\nReturn a NamedTuple containing data from data_col for each group in groups. The ordering of the data is the same as the ordering of groups.\n\n\n\n\n\n","category":"method"},{"location":"#Private","page":"Codex","title":"Private","text":"","category":"section"},{"location":"","page":"Codex","title":"Codex","text":"Modules = [Codex]\nPrivate = true","category":"page"}]
}
